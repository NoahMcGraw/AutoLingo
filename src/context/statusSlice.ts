import { createSlice } from '@reduxjs/toolkit'
import Status from '../models/Status.model'
import { RootState } from './store'
import {
  addTopicsToDeck,
  createDeck,
  deleteDeck,
  editDeck,
  getAll,
  removeCardFromDeck,
  removeTopicFromDeck,
} from '../features/deck/deckSlice'

export interface StatusState {
  status: Status
}

const initialState: StatusState = {
  status: Status.Idle,
}

export const statusSlice = createSlice({
  name: 'status',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setStatus: (state, action) => {
      state.status = action.payload
    },
    resetStatus: (state) => {
      state.status = Status.Idle
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /**
       * =====================
       * DECKS
       * =====================
       */
      /**
       * getAll
       */
      .addCase(getAll.pending, (state) => {
        // state.status = Status.Loading
      })
      .addCase(getAll.fulfilled, (state, action) => {
        state.status = Status.Idle
      })
      .addCase(getAll.rejected, (state) => {
        state.status = Status.Failed
      })
      /**
       * addTopicsToDeck
       */
      .addCase(addTopicsToDeck.pending, (state) => {
        state.status = Status.Loading
      })
      .addCase(addTopicsToDeck.fulfilled, (state, action) => {
        state.status = Status.Idle
      })
      .addCase(addTopicsToDeck.rejected, (state) => {
        state.status = Status.Failed
      })
      /**
       * removeTopicFromDeck
       */
      .addCase(removeTopicFromDeck.pending, (state) => {
        state.status = Status.Loading
      })
      .addCase(removeTopicFromDeck.fulfilled, (state, action) => {
        state.status = Status.Idle
      })
      .addCase(removeTopicFromDeck.rejected, (state) => {
        state.status = Status.Failed
      })
      /**
       * removeCardFromDeck
       */
      .addCase(removeCardFromDeck.pending, (state) => {
        state.status = Status.Loading
      })
      .addCase(removeCardFromDeck.fulfilled, (state, action) => {
        state.status = Status.Idle
      })
      .addCase(removeCardFromDeck.rejected, (state) => {
        state.status = Status.Failed
      })
      /**
       * createDeck
       */
      .addCase(createDeck.pending, (state) => {
        state.status = Status.Loading
      })
      .addCase(createDeck.fulfilled, (state, action) => {
        state.status = Status.Idle
      })
      .addCase(createDeck.rejected, (state) => {
        state.status = Status.Failed
      })
      /**
       * editDeck
       */
      .addCase(editDeck.pending, (state) => {
        state.status = Status.Loading
      })
      .addCase(editDeck.fulfilled, (state, action) => {
        state.status = Status.Idle
      })
      .addCase(editDeck.rejected, (state) => {
        state.status = Status.Failed
      })
      /**
       * deleteDeck
       */
      .addCase(deleteDeck.pending, (state) => {
        state.status = Status.Loading
      })
      .addCase(deleteDeck.fulfilled, (state, action) => {
        state.status = Status.Idle
      })
      .addCase(deleteDeck.rejected, (state) => {
        state.status = Status.Failed
      })
  },
})

export const { setStatus, resetStatus } = statusSlice.actions

/**
 * Returns the current status of the app
 */
export const selectStatus = (state: RootState) => state.status.status

export default statusSlice.reducer
